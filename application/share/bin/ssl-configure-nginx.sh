#!/bin/bash
# Nginx HTTPS Configuration Script for Torrust Tracker Demo
#
# This script configures nginx to enable HTTPS by appending the HTTPS
# extension configuration to the existing HTTP configuration.
#
# Usage: ./ssl-configure-nginx.sh DOMAIN
#
# Example: ./ssl-configure-nginx.sh example.com
#   This will configure HTTPS for tracker.example.com and grafana.example.com

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../../.." && pwd)"

# Source utilities
# shellcheck source=../../../scripts/shell-utils.sh
source "${PROJECT_ROOT}/scripts/shell-utils.sh"

# Validate arguments
if [[ $# -ne 1 ]]; then
    log_error "Usage: $0 DOMAIN"
    log_error "Example: $0 example.com"
    exit 1
fi

DOMAIN="$1"

# Check if we're in the application directory
APP_DIR="$(pwd)"
if [[ ! -f "${APP_DIR}/compose.yaml" ]]; then
    log_error "This script must be run from the application directory"
    log_error "Expected to find compose.yaml in current directory"
    exit 1
fi

# Configuration paths
NGINX_CONFIG_DIR="/var/lib/torrust/proxy/etc/nginx-conf"
NGINX_CONFIG_FILE="${NGINX_CONFIG_DIR}/default.conf"
TEMPLATES_DIR="${PROJECT_ROOT}/infrastructure/config/templates"
HTTP_TEMPLATE="${TEMPLATES_DIR}/nginx-http.conf.tpl"
HTTPS_EXTENSION_TEMPLATE="${TEMPLATES_DIR}/nginx-https-extension.conf.tpl"

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites for nginx HTTPS configuration..."
    
    # Check if nginx is running
    if ! docker compose ps proxy | grep -q "Up"; then
        log_error "Nginx proxy service is not running"
        log_error "Please start services first: docker compose up -d"
        exit 1
    fi
    
    # Check if templates exist
    if [[ ! -f "${HTTP_TEMPLATE}" ]]; then
        log_error "HTTP nginx template not found: ${HTTP_TEMPLATE}"
        exit 1
    fi
    
    if [[ ! -f "${HTTPS_EXTENSION_TEMPLATE}" ]]; then
        log_error "HTTPS extension template not found: ${HTTPS_EXTENSION_TEMPLATE}"
        log_error "Please create the HTTPS extension template first"
        exit 1
    fi
    
    # Check if SSL certificates exist for both subdomains
    local subdomains=("tracker.${DOMAIN}" "grafana.${DOMAIN}")
    for subdomain in "${subdomains[@]}"; do
        if ! docker compose exec proxy test -f "/etc/letsencrypt/live/${subdomain}/fullchain.pem" 2>/dev/null; then
            log_error "SSL certificate not found for ${subdomain}"
            log_error "Please generate certificates first: ./ssl-generate.sh ${DOMAIN} EMAIL MODE"
            exit 1
        fi
    done
    
    log_success "Prerequisites check passed"
}

# Backup current nginx configuration
backup_nginx_config() {
    log_info "Backing up current nginx configuration..."
    
    local backup_file
    backup_file="${NGINX_CONFIG_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
    
    if docker compose exec proxy test -f "/etc/nginx/conf.d/default.conf" 2>/dev/null; then
        if docker compose exec proxy cp "/etc/nginx/conf.d/default.conf" "/etc/nginx/conf.d/default.conf.backup.$(date +%Y%m%d_%H%M%S)" 2>/dev/null; then
            log_success "Current configuration backed up"
        else
            log_warning "Failed to create backup, but continuing..."
        fi
    else
        log_info "No existing configuration found, skipping backup"
    fi
}

# Process template with domain substitution
process_template() {
    local template_file="$1"
    local output_file="$2"
    
    log_info "Processing template: $(basename "${template_file}")"
    
    # Use envsubst to substitute domain name, then convert ${DOLLAR} back to $
    if ! DOMAIN_NAME="${DOMAIN}" envsubst "\${DOMAIN_NAME}" < "${template_file}" | sed "s/\${DOLLAR}/\$/g" > "${output_file}"; then
        log_error "Failed to process template: $(basename "${template_file}")"
        exit 1
    fi
    
    log_success "Template processed successfully: $(basename "${template_file}")"
}

# Generate complete nginx configuration
generate_nginx_config() {
    log_info "Generating complete nginx configuration..."
    
    local temp_dir
    temp_dir=$(mktemp -d)
    local http_config="${temp_dir}/http.conf"
    local https_extension="${temp_dir}/https-extension.conf"
    local final_config="${temp_dir}/default.conf"
    
    # Process HTTP template
    process_template "${HTTP_TEMPLATE}" "${http_config}"
    
    # Process HTTPS extension template
    process_template "${HTTPS_EXTENSION_TEMPLATE}" "${https_extension}"
    
    # Combine HTTP and HTTPS configurations
    log_info "Combining HTTP and HTTPS configurations..."
    {
        cat "${http_config}"
        echo ""
        echo "# === HTTPS CONFIGURATION (Generated by ssl-configure-nginx.sh) ==="
        cat "${https_extension}"
    } > "${final_config}"
    
    # Copy final configuration to nginx directory
    log_info "Installing new nginx configuration..."
    
    # Ensure nginx config directory exists on host
    sudo mkdir -p "${NGINX_CONFIG_DIR}"
    
    # Copy configuration file
    if sudo cp "${final_config}" "${NGINX_CONFIG_FILE}"; then
        log_success "Nginx configuration installed successfully"
    else
        log_error "Failed to install nginx configuration"
        rm -rf "${temp_dir}"
        exit 1
    fi
    
    # Clean up temporary files
    rm -rf "${temp_dir}"
}

# Test nginx configuration
test_nginx_config() {
    log_info "Testing nginx configuration..."
    
    if docker compose exec proxy nginx -t; then
        log_success "Nginx configuration test passed"
    else
        log_error "Nginx configuration test failed"
        log_error "Restoring backup configuration..."
        restore_backup_config
        exit 1
    fi
}

# Restore backup configuration if available
restore_backup_config() {
    log_info "Looking for backup configuration to restore..."
    
    # Find the most recent backup
    local backup_file
    backup_file=$(docker compose exec proxy sh -c 'ls -t /etc/nginx/conf.d/default.conf.backup.* 2>/dev/null | head -n1' 2>/dev/null || echo "")
    
    if [[ -n "${backup_file}" ]]; then
        log_info "Restoring backup: ${backup_file}"
        if docker compose exec proxy cp "${backup_file}" "/etc/nginx/conf.d/default.conf"; then
            log_info "Backup restored successfully"
            docker compose restart proxy
        else
            log_error "Failed to restore backup"
        fi
    else
        log_warning "No backup found to restore"
    fi
}

# Reload nginx configuration
reload_nginx() {
    log_info "Reloading nginx configuration..."
    
    if docker compose exec proxy nginx -s reload; then
        log_success "Nginx configuration reloaded successfully"
    else
        log_warning "Failed to reload nginx, trying restart..."
        if docker compose restart proxy; then
            log_success "Nginx restarted successfully"
        else
            log_error "Failed to restart nginx"
            exit 1
        fi
    fi
}

# Verify HTTPS is working
verify_https() {
    log_info "Verifying HTTPS configuration..."
    
    local subdomains=("tracker.${DOMAIN}" "grafana.${DOMAIN}")
    local verification_failed=false
    
    # Wait for nginx to fully restart
    sleep 5
    
    for subdomain in "${subdomains[@]}"; do
        log_info "Testing HTTPS for ${subdomain}..."
        
        # Test HTTPS connectivity (allow self-signed for staging)
        local https_protocol="https"
        if curl -k -s --connect-timeout 10 --max-time 15 "${https_protocol}://${subdomain}/" >/dev/null 2>&1; then
            log_success "✅ ${subdomain}: HTTPS connectivity test passed"
        else
            log_error "❌ ${subdomain}: HTTPS connectivity test failed"
            verification_failed=true
        fi
    done
    
    if [[ "${verification_failed}" == "true" ]]; then
        log_error "HTTPS verification failed for one or more subdomains"
        log_error "Please check the nginx logs: docker compose logs proxy"
        return 1
    else
        log_success "All HTTPS endpoints are working correctly"
        return 0
    fi
}

# Show final status and next steps
show_final_status() {
    log_info ""
    log_success "✅ Nginx HTTPS configuration completed successfully!"
    log_info ""
    log_info "HTTPS endpoints are now available:"
    log_info "  - https://tracker.${DOMAIN}"
    log_info "  - https://grafana.${DOMAIN}"
    log_info ""
    log_info "HTTP endpoints remain available (required for certificate renewal):"
    local http_protocol="http"
    log_info "  - ${http_protocol}://tracker.${DOMAIN}"
    log_info "  - ${http_protocol}://grafana.${DOMAIN}"
    log_info ""
    log_info "Configuration files:"
    log_info "  - Active config: ${NGINX_CONFIG_FILE}"
    log_info "  - Backups: ${NGINX_CONFIG_FILE}.backup.*"
    log_info ""
    log_info "To check nginx status:"
    log_info "  docker compose logs proxy"
    log_info ""
    log_info "To test HTTPS endpoints:"
    log_info "  curl -k https://tracker.${DOMAIN}/api/health_check"
    log_info "  curl -k https://grafana.${DOMAIN}/"
}

# Main configuration function
main() {
    log_info "Starting nginx HTTPS configuration for domain: ${DOMAIN}"
    
    check_prerequisites
    backup_nginx_config
    generate_nginx_config
    test_nginx_config
    reload_nginx
    
    if verify_https; then
        show_final_status
    else
        log_error "HTTPS verification failed"
        log_error "The configuration has been applied but HTTPS may not be working correctly"
        log_error "Please check the nginx logs and SSL certificates"
        exit 1
    fi
}

# Run main function
main "$@"
